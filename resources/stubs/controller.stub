<?php

namespace {{ namespace }};

use Orion\Http\Controllers\Controller;
use Orion\Concerns\DisableAuthorization;
use Orion\Concerns\DisablePagination;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;
use App\Models\Orion\{{ modelName }};
use Illuminate\Support\Facades\DB;

class {{ className }} extends Controller
{
    use DisableAuthorization, DisablePagination;

    protected $model = {{ modelName }}::class;

    protected function buildIndexFetchQuery(Request $request, array $requestedRelations): Builder
    {
        return {{ modelName }}::query()->with($requestedRelations);
    }

    public function index(Request $request)
    {
        $perPage = $request->get('per_page', 10);
        $onlyTrashed = $request->boolean('only_trashed', false);  // Check for soft deletes
        $searchQuery = $request->input('search.value', '');       // Extract search query

        // ✅ Build the base query
        $query = $this->buildIndexFetchQuery($request, []);

        // ✅ Handle soft deletes
        if ($onlyTrashed) {
            $query->onlyTrashed();
        }

        // ✅ Get fillable columns dynamically
        $model = new {{ modelName }}();
        $fillable = $model->getFillable();

        // ✅ Include `id` and `deleted_at` for soft delete support
        $fillable = array_merge(['id'], $fillable);

        // ✅ Apply dynamic search filtering
        if (!empty($searchQuery)) {
            $query->where(function ($q) use ($searchQuery, $fillable) {
                foreach ($fillable as $column) {
                    $q->orWhere($column, 'LIKE', "%{$searchQuery}%");
                }
            });
        }

        // ✅ Paginate the query results
        $items = $query->paginate($perPage);

        // ✅ Get column types from the database schema
        $table = $model->getTable();
        $columns = $this->getColumnTypes($table, $fillable);

        // ✅ Prepare the response
        $response = [
            'columns' => $columns,
            'data' => $items->map(fn($item) => $item->only($fillable)),
            'pagination' => [
                'total' => $items->total(),
                'per_page' => $items->perPage(),
                'current_page' => $items->currentPage(),
                'last_page' => $items->lastPage(),
                'from' => $items->firstItem(),
                'to' => $items->lastItem(),
            ]
        ];

        return response()->json($response);
    }

    private function getColumnTypes(string $table, array $fillable): array
    {
        $connection = config('database.default');

        if ($connection === 'mysql') {
            $database = config('database.connections.mysql.database');

            $columns = DB::select("
                SELECT COLUMN_NAME AS name, DATA_TYPE AS type, IS_NULLABLE AS is_nullable
                FROM INFORMATION_SCHEMA.COLUMNS
                WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?
            ", [$database, $table]);
        } elseif ($connection === 'sqlite') {
            $columns = DB::select("
                PRAGMA table_info($table)
            ");

            $columns = collect($columns)->map(fn($col) => (object)[
                'name' => $col->name,
                'type' => $col->type,
                'is_nullable' => $col->notnull ? 'NO' : 'YES'
            ])->toArray();
        } else {
            throw new \Exception("Unsupported database connection: $connection");
        }

        return collect($columns)
            ->filter(fn($col) => in_array($col->name, $fillable))
            ->map(function ($col) {
                return [
                    'name' => $col->name,
                    'type' => $this->mapSchemaTypeToJsonType($col->type),
                    'nullable' => $col->is_nullable === 'YES' ? true : false
                ];
            })->values()->toArray();
    }

    private function mapSchemaTypeToJsonType(string $type): string
    {
        return match (strtolower($type)) {    // Normalize to lowercase for consistency
            'int', 'smallint', 'mediumint', 'bigint', 'integer' => 'integer',
            'decimal', 'float', 'double', 'real' => 'float',
            'boolean', 'tinyint' => 'boolean',
            'datetime', 'timestamp' => 'datetime',
            'date' => 'date',                 // Separate date and datetime
            'time' => 'time',                 // Add support for time type
            default => 'string',
        };
    }
}
